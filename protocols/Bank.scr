module Bank;

global protocol Bank(role B1, role Svr, role SvrA, role SvrB, role B2) {

    START(basePrice:number) from Svr to B1;
    START(basePrice:number) from Svr to B2;
    do verify(B1, Svr, SvrA, SvrB, B2);
}

aux global protocol verify(role B1, role Svr, role SvrA, role SvrB, role B2) {
   Login(userid: string, pw: string) from B1 to Svr;
   Login(userid: string, pw: string) from Svr to SvrA;
   choice at SvrA{
     Ok() from SvrA to Svr;
     OK() from Svr to B1;
     OK() from Svr to B2;
     OK() from Svr to SvrB;
     do action(B1, Svr, SvrA, SvrB, B2);
} or {
     Fail(errorcode: number, errorMessage: string) from SvrA to Svr;
     choice at Svr{
     Freeze() from Svr to B1;
     Cease() from Svr to B2;
     Cease() from Svr to SvrA;
     Cease() from Svr to SvrB;
  } or {
     Failed() from Svr to B1;
     Failed() from Svr to B2;
     Failed() from Svr to SvrA;
     Failed() from Svr to SvrB;
     do verify(B2, Svr, SvrA, SvrB, B1);
  }

}
}

aux global protocol action(role B1, role Svr, role SvrA, role SvrB, role B2) {
   choice at B1{
       Withdraw(number) from B1 to Svr;
       Withdraw(number) from Svr to SvrB;
       OK() from Svr to B2;
       OK() from Svr to SvrA;
       do response(B1, Svr, SvrA, SvrB, B2);
   }
    or{
      Deposit(number) from B1 to Svr;
      Deposit(number) from Svr to SvrB;
      OK() from Svr to B2;
      OK() from Svr to SvrA;
      do response(B1, Svr, SvrA, SvrB, B2);
    }or{
      Cancel() from B1 to Svr;
      Cancel() from Svr to B2;
      Failed() from Svr to SvrA;
      Failed() from Svr to SvrB;
      do verify(B2, Svr, SvrA, SvrB, B1);
    }
}

aux global protocol response(role B1, role Svr, role SvrA, role SvrB, role B2) {
   choice at SvrB{
     Ok() from SvrB to Svr;
     OK() from Svr to B1;
     OK() from Svr to B2;
     OK() from Svr to SvrA;
     do verify(B2, Svr, SvrA, SvrB, B1);
} or {
     Fail(errorcode: number, errorMessage: string) from SvrB to Svr;
     choice at Svr{
     Freeze() from Svr to B1;
     Cease() from Svr to B2;
     Cease() from Svr to SvrA;
     Cease() from Svr to SvrB;
  } or {
     Failed() from Svr to B1;
     Failed() from Svr to B2;
     Failed() from Svr to SvrA;
     Failed() from Svr to SvrB;
     do verify(B2, Svr, SvrA, SvrB, B1);
  }
}
}