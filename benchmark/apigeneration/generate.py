from dottygen.cli import generate
from .counter import Counter
import random
import os
import shutil
from datetime import datetime
import matplotlib.pyplot as plt

parent_output_dir = os.path.abspath(os.path.join('benchmark', 'apigeneration', 'scr-sandbox'))
output_file = os.path.join(parent_output_dir, 'test.scr')
two_participant_template_path = os.path.abspath(os.path.join('benchmark', 'apigeneration', 'scr-templates', 'BasicTwoParticipants.scr'))
two_participants = ["Client", "Svr"]
payloads = ["number", "string"]

def _init_sandbox_():
    if os.path.exists(parent_output_dir) and os.path.isdir(parent_output_dir):
        shutil.rmtree(parent_output_dir)
    os.mkdir(parent_output_dir)

def multiple_loops_two_participant_protocol(label,payload_string1, payload_string2, participant, j, protocol):

            return f"rec Loop{j} {{ " \
                       f" choice at {two_participants[participant]} {{ \n HELLO{label[0]}({payload_string1}) from {two_participants[participant]} to {two_participants[1- participant]}; \n \n continue Loop{j}; \n }} or {{ \n HELLO{label[1]}({payload_string2}) from {two_participants[participant]} to {two_participants[1- participant]}; \n {protocol} \n }} }}"

def nested_choices_two_participant_protocol(label, payload_string1, payload_string2, participant, protocol):

           return f"choice at {two_participants[participant]} {{ \n HELLO{label[0]}({payload_string1}) from {two_participants[participant]} to {two_participants[1 - participant]}; \n {protocol} \n }}\n" \
                        f"or {{ \n HELLO{label[1]}({payload_string2}) from {two_participants[participant]} to {two_participants[1 - participant]}; }} \n"





def multiple_send_receive_two_participant_protocols(label, payload_string, participant):

      return f"HELLO{label}({payload_string}) from {two_participants[participant]} to {two_participants[1-participant]}; \n"




def generate_api_test(test_name):
    x = []
    function_time = []
    nuscr_time = []
    efsm_time = []
    class_time = []
    type_time = []
    merge_time = []

    max_range = 100
    range_val = 100

    for i in range(1, max_range):
        # counter = Counter()
        # for l in range(range_val):
            # protocol = ""
            # for j in range(1, i):
            #
            #     random.seed(datetime.now())
            #     participant = random.randint(0, 1)
            #     label = random.sample(range(1, 100), 2)
            #     # payload = random.sample(range(1, 10), 2)
            #     payload = [2,2]
            #     payload_string1 = "string, number"
            #     payload_string2 = "number, string"
            #
            #     if test_name == "send_receive":
            #       protocol += multiple_send_receive_two_participant_protocols(label[0], payload_string1, participant)
            #     elif test_name == "choices":
            #         protocol = nested_choices_two_participant_protocol(label, payload_string1, payload_string2, participant, protocol)
            #     elif test_name == "loop":
            #         protocol = multiple_loops_two_participant_protocol(label,payload_string1, payload_string2, participant, j, protocol)
            #
            #
            # _init_sandbox_()
            # shutil.copyfile(two_participant_template_path, output_file)
            # with open(output_file) as f:
            #     newText = f.read().replace('PROTOCOLS', protocol)
            #
            # with open(output_file, "w") as f:
            #     f.write(newText)
            #
            # generate(True, '/home/dev/effpi_sandbox/src/main/scala', "Test", output_file, [], False, False, False, counter)
        x.append(i)
        # function_time.append(counter.get_function_time()/range_val)
        # nuscr_time.append(counter.get_nuscr_time()/range_val)
        # type_time.append(counter.get_type_time()/range_val)
        # efsm_time.append(counter.get_efsm_time()/range_val)
        # class_time.append(counter.get_class_time()/range_val)
        # merge_time.append(counter.get_merge_time()/range_val)

    plot_graph(x, function_time, type_time, nuscr_time, efsm_time, class_time, merge_time, test_name)


def plot_graph(x, function_time, type_time, nuscr_time, efsm_time, class_time, merge_time, test_name):

    # for i in range(len(function_time)):
    #     function_time[i] += (type_time[i] + class_time[i] +merge_time[i])
    #
    # for i in range(len(efsm_time)):
    #     efsm_time[i] += nuscr_time[i]

    # plt.plot(x, efsm_time, label="EFSM + nuscr Generation")
    # plt.plot(x, function_time, label="Other Generations")

    if test_name == "loop":
        test_type = "Loops"
    elif test_name =="choices":
        test_type = " Choices"
    else:
        test_type = "Send/Receives"

    function_time = [9.46044921875e-05, 0.00023527622222900392, 0.0004251384735107422, 0.0005990386009216309, 0.0007482933998107911, 0.0009140276908874512, 0.0011518311500549317, 0.001336381435394287, 0.0015484809875488282, 0.001637434959411621, 0.0019532251358032227, 0.0021854496002197267, 0.002546083927154541, 0.002699434757232666, 0.0030072665214538573, 0.003286550045013428, 0.003641471862792969, 0.004016246795654297, 0.004350357055664063, 0.004914844036102295, 0.00507228136062622, 0.005479629039764404, 0.0058901596069335935, 0.006390979290008545, 0.006894409656524658, 0.0073245978355407715, 0.007879862785339356, 0.008374435901641846, 0.008742797374725341, 0.00943345308303833, 0.010042648315429687, 0.010610241889953614, 0.011415693759918213, 0.01200960874557495, 0.012804124355316162, 0.013380460739135742, 0.014278500080108643, 0.015047721862792969, 0.015755362510681152, 0.01677237033843994, 0.01962787628173828, 0.020416438579559326, 0.021074609756469728, 0.021988306045532226, 0.022018308639526366, 0.023090219497680663, 0.025253133773803713, 0.02548638582229614, 0.02786893606185913, 0.028194987773895265, 0.029886202812194826, 0.030819389820098877, 0.03251984119415283, 0.03339240074157715, 0.03490227460861206, 0.03736378669738769, 0.0380333924293518, 0.039761250019073484, 0.04157984256744385, 0.042718420028686525, 0.04461002111434936, 0.04704120874404907, 0.04835848569869995, 0.0501546049118042, 0.050995101928710936, 0.05379164218902588, 0.05524696826934814, 0.05759610891342163, 0.06075080633163451, 0.07199412584304808, 0.07017539024353027, 0.079891249179840, 0.07600955009460449, 0.07889044046401977, 0.08027092218399048, 0.08369166374206544, 0.08352739095687867, 0.08826331377029419, 0.09773673295974732, 0.09504824638366699, 0.09945924043655395, 0.10000756740570069, 0.09742478132247925, 0.10032025337219239, 0.10350032329559326, 0.10760244846343994, 0.11068723440170287, 0.11356919527053833, 0.1184844160079956, 0.12168210506439209, 0.12423785448074341, 0.12819464445114137, 0.15981560707092285, 0.13625078916549682, 0.1407883071899414, 0.15209259271621703, 0.14924859762191772, 0.15600711107254028, 0.1586965274810791]

    type_time = [3.0944347381591795e-05, 6.0510635375976565e-05, 9.326457977294922e-05, 0.00012586355209350585, 0.00016436338424682617, 0.00019985198974609375, 0.00025680065155029295, 0.0003191876411437988, 0.0003481292724609375, 0.000375974178314209, 0.0004423403739929199, 0.0005057072639465332, 0.0005841875076293946, 0.0006192135810852051, 0.0006903982162475585, 0.0007286190986633301, 0.0008138751983642578, 0.0008888697624206543, 0.0009854555130004883, 0.0010971546173095704, 0.0011340093612670899, 0.0012485432624816896, 0.0013087630271911622, 0.001438889503479004, 0.0015498733520507813, 0.0016551089286804199, 0.0017692828178405761, 0.0018593120574951173, 0.0019420003890991211, 0.002084801197052002, 0.0022014904022216795, 0.002328324317932129, 0.0024547195434570313, 0.0025975704193115234, 0.002787296772003174, 0.002845714092254639, 0.003071267604827881, 0.00316605806350708, 0.0032878923416137695, 0.00353346586227417, 0.004055113792419434, 0.004187514781951904, 0.004262142181396485, 0.004394538402557373, 0.004423272609710693, 0.004614183902740479, 0.005023813247680664, 0.004985766410827637, 0.005416650772094727, 0.005395228862762451, 0.005663647651672364, 0.005842976570129395, 0.006104388236999512, 0.006235430240631104, 0.006417384147644043, 0.006805768013000488, 0.006897411346435547, 0.0070580863952636715, 0.007430541515350342, 0.007470974922180176, 0.007738499641418457, 0.00822068452835083, 0.008136334419250489, 0.008472952842712402, 0.00860086441040039, 0.008967366218566895, 0.009071226119995118, 0.009390640258789062, 0.011969820022583008, 0.01123591184616089, 0.01277489900588989, 0.0124513792991637, 0.011295623779296875, 0.012027385234832764, 0.012118360996246337, 0.012543962001800538, 0.012294845581054687, 0.01279038667678833, 0.01395296335220337, 0.013636536598205566, 0.014118549823760986, 0.013911070823669434, 0.013329939842224121, 0.013554124832153321, 0.013863911628723144, 0.014013156890869141, 0.01460460662841797, 0.014516563415527343, 0.014902482032775879, 0.015293331146240234, 0.01539363145828247, 0.015777003765106202, 0.020545358657836913, 0.01617483615875244, 0.01656710147857666, 0.018242475986480714, 0.01731841802597046, 0.017971222400665284, 0.018004372119903564]

    class_time = [6.802082061767578e-05, 0.00012280464172363282, 0.00023105621337890625, 0.0002621889114379883, 0.0003191971778869629, 0.0003472399711608887, 0.0004610657691955566, 0.0005087471008300782, 0.0005612516403198242, 0.0005915951728820801, 0.0006412029266357422, 0.0007145595550537109, 0.0008933138847351074, 0.0009584856033325195, 0.0010208845138549804, 0.0011844134330749512, 0.0014114141464233398, 0.0014801859855651856, 0.0015305376052856445, 0.0017577862739562987, 0.0018500089645385742, 0.0020192694664001466, 0.0021392989158630373, 0.002423651218414307, 0.002630617618560791, 0.0027683019638061524, 0.0037270212173461915, 0.003452885150909424, 0.003346524238586426, 0.003750913143157959, 0.003912172317504883, 0.004360768795013428, 0.004500167369842529, 0.004841821193695068, 0.0053162527084350585, 0.005447967052459717, 0.005971155166625977, 0.006345865726470948, 0.006548550128936768, 0.007782673835754395, 0.009244956970214845, 0.008821077346801758, 0.00928377389907837, 0.00963484525680542, 0.009837582111358642, 0.010315911769866943, 0.01149502992630005, 0.011729440689086913, 0.0129351806640625, 0.012921802997589112, 0.013684325218200684, 0.014207839965820312, 0.015212130546569825, 0.01677511930465698, 0.01679512023925781, 0.01810025691986084, 0.01799179792404175, 0.018917381763458252, 0.02015599489212036, 0.020858354568481445, 0.021688435077667236, 0.02353755235671997, 0.023527798652648927, 0.02476895570755005, 0.025907669067382812, 0.026738431453704834, 0.02739769220352173, 0.028557255268096923, 0.028221056461334226, 0.02866306066513061, 0.02946342086791992, 0.025460696220398, 0.036709277629852294, 0.039040937423706054, 0.04475679874420166, 0.04379750967025757, 0.042466824054718015, 0.05135743141174316, 0.04842639923095703, 0.04916533946990967, 0.05564119577407837, 0.05113544225692749, 0.050153985023498535, 0.0521485447883606, 0.05956193447113037, 0.055900447368621826, 0.05694215774536133, 0.05801438570022583, 0.06001677513122559, 0.062030775547027586, 0.06377395868301391, 0.07528239011764526, 0.0852637219429016, 0.06808904886245727, 0.07042655229568481, 0.0872386622428894, 0.07600813627243042, 0.0796918272972107, 0.08032221794128418]

    merge_time = [4.9810409545898435e-05, 0.00016489505767822266, 0.0002645134925842285, 0.00033865928649902345, 0.00042276620864868165, 0.000516364574432373, 0.0006284928321838379, 0.0008266663551330566, 0.0007907700538635254, 0.0008352160453796387, 0.0009140944480895996, 0.0011214303970336914, 0.001109488010406494, 0.0011641097068786621, 0.001195380687713623, 0.001509530544281006, 0.001382756233215332, 0.0015133142471313477, 0.0016225337982177734, 0.0017544770240783692, 0.0018738818168640137, 0.001894357204437256, 0.0021629738807678223, 0.002042653560638428, 0.00211045503616333, 0.0021875691413879394, 0.002789666652679443, 0.0023116374015808103, 0.0026281929016113282, 0.0025330591201782227, 0.00263810396194458, 0.0029016709327697753, 0.0028259420394897462, 0.0029659438133239745, 0.003235633373260498, 0.003131074905395508, 0.0033851385116577147, 0.0036361122131347654, 0.003765387535095215, 0.0035639119148254393, 0.003374009609222412, 0.00432051420211792, 0.004731330871582031, 0.004496560096740722, 0.004751310348510742, 0.005254724884033203, 0.005148921012878418, 0.0051249170303344724, 0.005162191390991211, 0.005336785316467285, 0.005259411334991455, 0.0063111972808837895, 0.005883369445800781, 0.005691583156585693, 0.005794599056243897, 0.006635212898254394, 0.006467981338500977, 0.006259605884552002, 0.006426656246185302, 0.006438558101654053, 0.006782424449920654, 0.007133135795593262, 0.0072249722480773925, 0.007219276428222656, 0.00738053560256958, 0.0075936555862426754, 0.00805335283279419, 0.007959895133972168, 0.01235990047454834, 0.012923400402069093, 0.01370938777923584, 0.01475120735168457, 0.014097838401794434, 0.011896419525146484, 0.0094211483001709, 0.009533915519714355, 0.009840672016143798, 0.01023622989654541, 0.03268199682235718, 0.01053819179534912, 0.010532965660095215, 0.010797972679138184, 0.010428667068481445, 0.010867466926574707, 0.010808031558990478, 0.010738580226898194, 0.011543276309967042, 0.011110405921936035, 0.012406401634216309, 0.011994776725769042, 0.01220714807510376, 0.011874401569366455, 0.014919404983520507, 0.011626191139221191, 0.012894935607910156, 0.012607793807983398, 0.013215892314910889, 0.015318527221679687, 0.013969733715057372]

    nuscr_time = [0.2746428608894348, 0.28131083250045774, 0.28276429414749144, 0.2827449703216553, 0.2852255582809448, 0.28054195642471313, 0.287175612449646, 0.29051335096359254, 0.2789213418960571, 0.2822346019744873, 0.2811269664764404, 0.2830137085914612, 0.29324174642562867, 0.28296435832977296, 0.2780307841300964, 0.28503659009933474, 0.28493049621582034, 0.28665425062179567, 0.2813376832008362, 0.29756635904312134, 0.27863076210021975, 0.2731794404983521, 0.2706669616699219, 0.26631707906723023, 0.27038227081298827, 0.27137664556503294, 0.2726215577125549, 0.2728453326225281, 0.27415313720703127, 0.27459217309951783, 0.27636420249938964, 0.27594996213912965, 0.27557106971740725, 0.27717833042144774, 0.2785419726371765, 0.2747219634056091, 0.27790616035461424, 0.27763847827911375, 0.2772816491127014, 0.27886994123458864, 0.3272753643989563, 0.312198748588562, 0.3223417735099792, 0.3065609908103943, 0.2911711406707764, 0.28940715789794924, 0.29502684593200684, 0.2883837008476257, 0.30802777767181394, 0.2920421266555786, 0.2976131057739258, 0.2966902542114258, 0.30037245988845823, 0.2947498059272766, 0.29464221000671387, 0.31872074842453, 0.2989064884185791, 0.30054455518722534, 0.30030815839767455, 0.30057382106781005, 0.3032486867904663, 0.30633177518844606, 0.3034829807281494, 0.30709386348724366, 0.3033760905265808, 0.30810377120971677, 0.3082999157905579, 0.3097019863128662, 0.35410852432251, 0.365166156291962, 0.39568554401397, 0.3408375906944274, 0.349596791267395, 0.36586608171463014, 0.3684359502792358, 0.3578595423698425, 0.35222063064575193, 0.36387698650360106, 0.3836271333694458, 0.37145964622497557, 0.3806936454772949, 0.3676475977897644, 0.3354528498649597, 0.3350493860244751, 0.33391714334487915, 0.34063244104385376, 0.3374485206604004, 0.3439794421195984, 0.3488873553276062, 0.3475524520874023, 0.34797205686569216, 0.3462175750732422, 0.48442505359649657, 0.35162564754486086, 0.35421777963638307, 0.3934969186782837, 0.3586452078819275, 0.3697826862335205, 0.3657154774665832]

    efsm_time = [0.008676965236663819, 0.026883776187896728, 0.04579216957092285, 0.0636829662322998, 0.08295372724533082, 0.10010012626647949, 0.12035857439041138, 0.1379173231124878, 0.15192272663116455, 0.16960755825042725, 0.18632059574127197, 0.2055148220062256, 0.23433029651641846, 0.24171532154083253, 0.25463310003280637, 0.28330260038375854, 0.2982481002807617, 0.31737821102142333, 0.3282706642150879, 0.365275456905365, 0.36163743019104005, 0.3748601484298706, 0.38803958892822266, 0.4055929589271545, 0.4217769503593445, 0.44040488243103026, 0.4550558352470398, 0.47325342178344726, 0.49227487564086914, 0.5077622556686401, 0.5260715436935425, 0.5428478908538819, 0.5598997211456299, 0.5803431844711304, 0.598787293434143, 0.6111454916000366, 0.6328365683555603, 0.6485451602935791, 0.6654319882392883, 0.6824657535552978, 0.8095584082603454, 0.7989681053161621, 0.8312009835243225, 0.8127891540527343, 0.7924024891853333, 0.8029484772682189, 0.8299696660041809, 0.8455252647399902, 0.8988074231147766, 0.8816045832633972, 0.9075847005844117, 0.9251994037628174, 0.9498557019233703, 0.9474294996261596, 0.9656365990638733, 1.0288971757888794, 1.005663468837738, 1.0418953490257263, 1.0430011701583863, 1.0597689080238342, 1.0778371334075927, 1.1087351608276368, 1.1154913806915283, 1.1450537300109864, 1.1564229106903077, 1.1826330208778382, 1.1923355221748353, 1.2176303243637085, 1.120722332000732, 1.17114844083786, 1.257730293273926, 1.3923047542572, 1.4163194584846497, 1.50210599899292, 1.5102623081207276, 1.5287169194221497, 1.5018903708457947, 1.5401203799247742, 1.657681496143341, 1.6221377897262572, 1.6546122646331787, 1.6404151797294617, 1.5125936579704284, 1.5401837062835693, 1.5473741602897644, 1.5717141103744507, 1.5875270342826844, 1.6033613967895508, 1.6381663036346437, 1.6560366177558898, 1.6704990839958191, 1.677191779613495, 1.670842266082763, 1.736377546787262, 1.7477165508270263, 1.8849027967453003, 1.7865635275840759, 1.8282225155830383, 1.8325116753578186]

    plt.plot(x, function_time, label="Function Generation")
    plt.plot(x, type_time, label="Type Generation")
    plt.plot(x, nuscr_time, label="Nuscr Generation")
    plt.plot(x, efsm_time, label="EFSM Generation")
    plt.plot(x, class_time, label="Class Generation")
    plt.plot(x, merge_time, label="Merging")
    plt.xlabel(f'Number of {test_type}')
    plt.ylabel('Time taken (s)')
    plt.title(f'Multiple {test_type} with Two Participants')
    plt.legend()
    plt.savefig(f"benchmark/apigeneration/graphs/test_{test_name}.png")
